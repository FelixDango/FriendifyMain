using AutoMapper;
using FriendifyMain.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace FriendifyMain.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RoleController : Controller
    {
        // Inject the database context, the user manager and the role manager
        private readonly FriendifyContext _context;
        private readonly UserManager<User> _userManager;
        private readonly RoleManager<Role> _roleManager;
        private readonly IMapper _mapper; // Declare the _mapper variable

        public RoleController(FriendifyContext context, UserManager<User> userManager,
                              RoleManager<Role> roleManager, IMapper mapper)
        {
            _context = context;
            _userManager = userManager;
            _roleManager = roleManager;
            _mapper = mapper;
        }

        // The get action allows an admin to get a list of all roles or a filtered list by name
        [HttpGet]
        [Authorize(Roles = "Admin")] // Require admin role
        [ProducesResponseType(typeof(List<Role>), 200)] // Specify possible response type and status code
        public async Task<IActionResult> Get([FromQuery] string name) // Indicate that the name is bound from query string
        {
            // Get all roles from the role manager
            var roles = await _roleManager.Roles.ToListAsync();

            // Filter roles by name if provided
            if (!string.IsNullOrEmpty(name))
            {
                roles = roles.Where(r => r.Name.Contains(name)).ToList();
            }

            // Return a 200 OK response with the filtered roles list
            return Ok(roles);
        }

        // The create action allows an admin to create a new role with a name
        [HttpPost]
        [Authorize(Roles = "Admin")] // Require admin role
        [ProducesResponseType(typeof(Role), 200)] // Specify possible response type and status code
        [ProducesResponseType(typeof(IdentityError[]), 400)] // Specify possible response type and status code
        public async Task<IActionResult> Create([FromBody] Role model) // Indicate that the model is bound from form data
        {
            try
            {
                // Validate the role model using data annotations and custom logic
                if (ModelState.IsValid && !string.IsNullOrEmpty(model.Name))
                {
                    // Set the role id to 0 as it will be generated by the database automatically
                    model.Id = 0;

                    // Create the role using the role manager and check if it was successful
                    var result = await _roleManager.CreateAsync(model);

                    if (result.Succeeded)
                    {
                        // Return a 200 OK response with the role data
                        return Ok(model);
                    }

                    // If not, return a 400 Bad Request response with the errors
                    return BadRequest(result.Errors);
                }

                // If the model is not valid, return a 400 Bad Request response with validation errors
                return BadRequest(ModelState);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The delete action allows an admin to delete a role by its id
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")] // Require admin role
        [ProducesResponseType(200)] // Specify possible response status code
        [ProducesResponseType(typeof(string), 404)] // Specify possible response type and status code
        public async Task<IActionResult> Delete(int id) // Indicate that the id is bound from route data
        {
            try
            {
                // Get the role by its id from the role manager
                var role = await _roleManager.FindByIdAsync(id.ToString());

                // Check if the role exists
                if (role == null)
                {
                    return NotFound("Role not found."); // Return a 404 not found response with an error message
                }

                // Delete the role using the role manager and check if it was successful
                var result = await _roleManager.DeleteAsync(role); // Close the parentheses

                if (result.Succeeded)
                {
                    // Return a 200 OK response with a message
                    return Ok($"Role {role.Name} deleted.");
                }

                // If not, return a 400 Bad Request response with the errors
                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        [HttpPost("assignrole")]
        [Authorize(Roles = "Admin")] // Require admin role
        [ProducesResponseType(200)] // Specify possible response status code
        [ProducesResponseType(typeof(string), 404)] // Specify possible response type and status code
        public async Task<IActionResult> AssignRole(int userId, string roleName) // Indicate that the userId and roleName are bound from form data
        {
            try
            {
                // Get the user by id from the user manager
                var user = await _userManager.FindByIdAsync(userId.ToString());

                // Check if the user exists
                if (user == null)
                {
                    return NotFound("User not found."); // Return a 404 not found response with an error message
                }

                // Check if the role exists
                var role = await _roleManager.FindByNameAsync(roleName);
                if (role == null)
                {
                    return NotFound("Role not found."); // Return a 404 not found response with an error message
                }

                // Check if the user is already in the role
                var isInRole = await _userManager.IsInRoleAsync(user, roleName);
                if (isInRole)
                {
                    return Ok("User already in role."); // Return a 200 OK response with a message
                }

                // Add the user to the role using the user manager and check if it was successful
                var result = await _userManager.AddToRoleAsync(user, roleName);

                if (result.Succeeded)
                {
                    // Return a 200 OK response with a message
                    return Ok($"User {user.UserName} assigned to role {role.Name}.");
                }

                // If not, return a 400 Bad Request response with the errors
                return BadRequest(result.Errors);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

    }
}
