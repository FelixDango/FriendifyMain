using FriendifyMain.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace FriendifyMain.Controllers
{
    public class HomeController : Controller
    {
        // Inject the database context and the user manager
        private readonly FriendifyContext _context;
        private readonly UserManager<User> _userManager;

        public HomeController(FriendifyContext context, UserManager<User> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        // The index action returns the home page with the latest posts from the users that the current user follows
        [Authorize] // Require authentication
        public async Task<IActionResult> Index()
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Get the list of users that the current user follows
                var followedUsers = currentUser.Follows.Select(f => f.Id).ToList();

                // Get the latest posts from the followed users, ordered by date in descending order
                var posts = await _context.Posts
                    .Where(p => followedUsers.Contains(p.UserId))
                    .OrderByDescending(p => p.Date)
                    .ToListAsync();

                // Return the index view with the posts as the model
                return View(posts);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The create action allows the current user to create a new post with optional pictures and videos
        [Authorize] // Require authentication
        [HttpGet] // Only respond to GET requests
        public async Task<IActionResult> CreateAsync()
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Return the create view with an empty post as the model
                return View(new Post());
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        [Authorize] // Require authentication
        [HttpPost] // Only respond to POST requests
        public async Task<IActionResult> Create(Post post)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Validate the post model using data annotations and custom logic
                if (ModelState.IsValid && !string.IsNullOrEmpty(post.Content))
                {
                    // Set the post properties that are not provided by the user input
                    post.Id = 0; // The id will be generated by the database automatically
                    post.UserId = currentUser.Id; // The user is the current user
                    post.Date = DateTime.Now; // The date is the current date and time
                    post.LikedBy = new List<User>(); // The liked by list is initially empty
                    post.Comments = new List<Comment>(); // The comments list is initially empty

                    // Add the post to the database context and save changes
                    _context.Posts.Add(post);
                    await _context.SaveChangesAsync();

                    // Redirect to the index action to show the updated posts list
                    return RedirectToAction(nameof(Index));
                }

                // If the model is not valid, return the create view with the same model and show validation errors
                return View(post);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The like action allows the current user to like or unlike a post by its id
        [Authorize] // Require authentication
        [HttpPost] // Only respond to POST requests
        public async Task<IActionResult> Like(int PostId)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Get the post by its id from the database context
                var post = await _context.Posts.FindAsync(PostId);

                // Check if the post exists
                if (post == null)
                {
                    return NotFound(); // Return a 404 not found response
                }

                // Check if the current user has already liked the post
                if (post.LikedBy.Contains(currentUser))
                {
                    // If yes, remove the current user from the liked by list
                    post.LikedBy.Remove(currentUser);
                }
                else
                {
                    // If no, add the current user to the liked by list
                    post.LikedBy.Add(currentUser);
                }

                // Save the changes to the database context
                await _context.SaveChangesAsync();

                // Redirect to the index action to show the updated posts list
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The comment action allows the current user to add a comment to a post by its id and the comment text
        [Authorize] // Require authentication
        [HttpPost] // Only respond to POST requests
        public async Task<IActionResult> Comment(int PostId, string text)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Get the post by its id from the database context
                var post = await _context.Posts.FindAsync(PostId);

                // Check if the post exists and the comment text is not empty or null
                if (post == null || string.IsNullOrEmpty(text))
                {
                    return NotFound(); // Return a 404 not found response
                }

                // Create a new comment with the given text and the current date and time
                var comment = new Comment()
                {
                    Text = text,
                    Date = DateTime.Now,
                    UserId = currentUser.Id,
                    PostId = post.Id,
                    Id = 0,
                };

                // Add the comment to the comments list of the post
                post.Comments.Add(comment);

                // Save the changes to the database context
                await _context.SaveChangesAsync();

                // Redirect to the index action to show the updated posts list
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The delete action allows the current user to delete a post by its id if they are the owner or a moderator
        [Authorize] // Require authentication
        [HttpPost] // Only respond to POST requests
        public async Task<IActionResult> Delete(int PostId)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Get the post by its id from the database context
                var post = await _context.Posts.FindAsync(PostId);

                // Check if the post exists
                if (post == null)
                {
                    return NotFound(); // Return a 404 not found response
                }

                // Check if the current user is the owner or a moderator of the post
                if (post.UserId == currentUser.Id || currentUser.IsModerator || currentUser.IsAdmin)
                {
                    // If yes, remove the post from the database context and save changes
                    _context.Posts.Remove(post);
                    await _context.SaveChangesAsync();

                    // Redirect to the index action to show the updated posts list
                    return RedirectToAction(nameof(Index));
                }

                // If no, return a 403 forbidden response
                return Forbid();
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        // The edit action allows the owner or admin or moderator to edit a post by its id
        [Authorize] // Require authentication
        [HttpGet] // Only respond to GET requests
        public async Task<IActionResult> Edit(int PostId)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Get the post by its id from the database context
                var post = await _context.Posts.FindAsync(PostId);

                // Check if the post exists
                if (post == null)
                {
                    return NotFound(); // Return a 404 not found response
                }

                // Check if the current user is the owner or admin or moderator of the post
                if (post.UserId == currentUser.Id || currentUser.IsAdmin || currentUser.IsModerator)
                {
                    // If yes, return the edit view with the post as the model
                    return View(post);
                }

                // If no, return a 403 forbidden response
                return Forbid();
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }

        [Authorize] // Require authentication
        [HttpPost] // Only respond to POST requests
        public async Task<IActionResult> Edit(int PostId, Post post)
        {
            try
            {
                // Get the current user from the user manager
                var currentUser = await _userManager.GetUserAsync(User);

                // Check if the user is suspended
                if (currentUser.Suspended)
                {
                    return View("Suspended"); // Return a view that informs the user that they are suspended
                }

                // Validate the post model using data annotations and custom logic
                if (ModelState.IsValid && !string.IsNullOrEmpty(post.Content))
                {
                    // Get the original post by its id from the database context
                    var originalPost = await _context.Posts.FindAsync(PostId);

                    // Check if the original post exists and matches with the given post id
                    if (originalPost == null || originalPost.Id != post.Id)
                    {
                        return NotFound(); // Return a 404 not found response
                    }

                    // Check if the current user is the owner or admin or moderator of the original post
                    if (originalPost.UserId == currentUser.Id || currentUser.IsAdmin || currentUser.IsModerator)
                    {
                        // If yes, update the original post properties that can be edited by the user input
                        originalPost.Content = post.Content;
                        originalPost.Pictures = post.Pictures;
                        originalPost.Videos = post.Videos;

                        // Save the changes to the database context and reload the original post to reflect any changes made by triggers or computed columns in the database 
                        _context.Posts.Update(originalPost);
                        await _context.SaveChangesAsync();
                        await _context.Entry(originalPost).ReloadAsync();

                        // Redirect to the index action to show the updated posts list
                        return RedirectToAction(nameof(Index));
                    }

                    // If no, return a 403 forbidden response
                    return Forbid();
                }

                // If the model is not valid, return the edit view with the same model and show validation errors
                return View(post);
            }
            catch (Exception ex)
            {
                // Handle any possible exceptions
                return View("Error", ex.Message); // Return a view that shows the error message
            }
        }
    }
}

